# Based on an implementation by Olivier Grisel
# https://github.com/ogrisel/python-appveyor-demo
# License: CC0 1.0 Universal

image: Visual Studio 2019

cache:
  - '%LOCALAPPDATA%\pip\Cache'

environment:
  global:
    BUILD_DOCS: "true"

  matrix:

    # Miniconda versions
    # Other versions of Python are also supported from the same conda
    # installations.
    # See: https://www.appveyor.com/docs/windows-images-software/#miniconda
    - PYTHON_VERSION: "2.7"
      MINICONDA: C:\Miniconda-x64
      PYTHON_ARCH: "64"

    # Versions listed below which are pre-installed on Appveyor will be
    # used when available.
    # See: https://www.appveyor.com/docs/windows-images-software/#python
    # Otherwise, the requested version of Python will be downloaded
    # and installed using the script .ci/appveyor/install.ps1

    - PYTHON: C:\Python27
      PYTHON_VERSION: "2.7.x"
      PYTHON_ARCH: "32"

    - PYTHON: C:\Python27-x64
      PYTHON_VERSION: "2.7.x"
      PYTHON_ARCH: "64"

    - PYTHON: C:\Python35
      PYTHON_VERSION: "3.5.x"
      PYTHON_ARCH: "32"

    - PYTHON: C:\Python35-x64
      PYTHON_VERSION: "3.5.x"
      PYTHON_ARCH: "64"

    - PYTHON: C:\Python36
      PYTHON_VERSION: "3.6.x"
      PYTHON_ARCH: "32"

    - PYTHON: C:\Python36-x64
      PYTHON_VERSION: "3.6.x"
      PYTHON_ARCH: "64"

    - PYTHON: C:\Python37
      PYTHON_VERSION: "3.7.x"
      PYTHON_ARCH: "32"

    - PYTHON: C:\Python37-x64
      PYTHON_VERSION: "3.7.x"
      PYTHON_ARCH: "64"

    - PYTHON: C:\Python38
      PYTHON_VERSION: "3.8.x"
      PYTHON_ARCH: "32"

    - PYTHON: C:\Python38-x64
      PYTHON_VERSION: "3.8.x"
      PYTHON_ARCH: "64"

    - PYTHON: C:\Python39
      PYTHON_VERSION: "3.9.x"
      PYTHON_ARCH: "32"

    - PYTHON: C:\Python39-x64
      PYTHON_VERSION: "3.9.x"
      PYTHON_ARCH: "64"

# Run jobs on Windows 32bit and 64bit
platform:
  - x86
  - x64

# Cancel pending jobs after first job failure
# Only run Python 32bit on 32bit arch, and 64bit on 64bit
matrix:
  fast_finish: true
  exclude:
    - platform: x86
      PYTHON_ARCH: "64"
    - platform: x64
      PYTHON_ARCH: "32"

# Here we override common configuration
for:
# Override settings for release branches
-
  branches:
    only:
      - /^v?\d+(\.[x\d]+)+$/

  configuration: Release

  after_test:
    # If tests are successful, create binary packages for the project.
    - "%CMD_IN_ENV% python -m pip install --upgrade pip setuptools wheel"
    - "%CMD_IN_ENV% python setup.py sdist bdist_wheel --universal"
    - "%CMD_IN_ENV% python setup.py bdist_wininst"
    # Allow failure on bdist_msi, because it does not work with letters in
    # the package version number. Using letters is normal for development
    # versions (e.g. 1.3.dev0, 1.3.2rc4), and we don't want to cause Appveyor
    # to mark the build to fail because of it. The command will work for your
    # release versions if their version numbers are only numeric (e.g. 1.3.2).
    - "%CMD_IN_ENV% python setup.py bdist_msi || ver>nul"
    - ps: ls dist

  artifacts:
    # Archive the generated packages in the ci.appveyor.com build report.
    - path: dist\*

init:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          Write-Host "There are newer queued builds for this pull request, skipping build."
          Exit-AppveyorBuild
        }

install:
  - ECHO "PYTHON_VERSION = %PYTHON_VERSION%"
    & ECHO "PYTHON = %PYTHON%"
    & ECHO "PYTHON_ARCH = %PYTHON_ARCH%"
    & ECHO "MINICONDA = %MINICONDA%"

  - ECHO "Filesystem root:"
  - ps: ls "C:/"

  - ECHO "Installed SDKs:"
  - ps: |
      If (Test-Path "C:/Program Files/Microsoft SDKs/Windows") {
        ls "C:/Program Files/Microsoft SDKs/Windows"
      }

  # Install Python (from the official .msi of https://python.org) and pip when
  # not already installed.
  - ps: if (-not([string]::IsNullOrEmpty($env:PYTHON)) -and -not(Test-Path($env:PYTHON))) { & .ci\appveyor\install.ps1 }

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  # If we are using MINICONDA, add that to the PATH instead.
  - IF "%MINICONDA%"=="" (
        SET "PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
    ) ELSE (
        SET "PATH=%MINICONDA%;%MINICONDA%\\Scripts;%PATH%"
    )

  # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
  # /E:ON and /V:ON options are not enabled in the batch script intepreter
  # See: http://stackoverflow.com/a/13751649/163740
  - IF "%MINICONDA%"=="" SET "CMD_IN_ENV=cmd /E:ON /V:ON /C .\\.ci\\appveyor\\run_with_env.cmd"

  # Set up miniconda environment
  - IF NOT "%MINICONDA%"=="" (
      ECHO "Doing miniconda set up"
      && SET "CMD_IN_ENV="
      && conda config --set always_yes yes --set changeps1 no
      && conda update -q conda
      && conda info -a
      && conda create -q -n test-environment python=%PYTHON_VERSION%
      && activate test-environment
    )

  # Check that we have the expected version and architecture for Python
  - "%CMD_IN_ENV% python --version"
  - >-
     %CMD_IN_ENV%
     python -c "import sys,platform,struct;
     print(sys.platform, platform.machine(), struct.calcsize('P') * 8, )"

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "%CMD_IN_ENV% python -m pip install --upgrade pip"

  # Show current directory contents
  - ECHO "Project directory:"
  - ps: "ls"

  # Show PATH variable
  - ECHO "PATH:"
  - ECHO "%PATH%"

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "%CMD_IN_ENV% python -m pip install ."
  - IF "%BUILD_DOCS%"=="true" ( %CMD_IN_ENV% python -m pip install .[docs] )
  # Also install any developmental requirements, if present.
  - IF EXIST requirements-dev.txt %CMD_IN_ENV% pip install -r requirements-dev.txt
  - IF EXIST requirements-test.txt %CMD_IN_ENV% pip install -r requirements-test.txt

build_script:
  # Build the compiled extension
  - "%CMD_IN_ENV% python setup.py build"

test_script:
  # Run the project tests and store results in testresults.xml log
  - "%CMD_IN_ENV% python -m pytest --cov=package_name --cov-report term --cov-report xml --cov-config .coveragerc --junitxml=testresults.xml"
  # Check documentation can be built
  - cd docs
  - IF "%BUILD_DOCS%"=="true" ( make.bat html )
  - cd ..

on_success:
  # Push coverage reports
  - '%CMD_IN_ENV% python -m pip install codecov'
  - '%CMD_IN_ENV% python -m codecov -f coverage.xml || echo "Codecov push failed" && ver>nul'
  - '%CMD_IN_ENV% python -m pip install coveralls'
  - '%CMD_IN_ENV% python -m coveralls || echo "Coveralls push failed" && ver>nul'

on_finish:
  # Upload test results to AppVeyor
  - ps: |
      If (Test-Path .\testresults.xml) {
        (new-object net.webclient).UploadFile(
          "https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)",
          (Resolve-Path .\testresults.xml)
        )
      }
      $LastExitCode = 0
